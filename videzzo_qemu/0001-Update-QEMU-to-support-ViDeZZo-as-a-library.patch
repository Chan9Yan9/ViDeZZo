diff --git a/include/qemu/osdep.h b/include/qemu/osdep.h
index b1c161c..42dfd3d 100644
--- a/include/qemu/osdep.h
+++ b/include/qemu/osdep.h
@@ -212,6 +212,15 @@ void QEMU_ERROR("code path is reachable")
 #error building with G_DISABLE_ASSERT is not supported
 #endif
 
+#ifdef VIDEZZO_LESS_CRASHES
+#undef assert
+#define assert(x)
+#undef g_assert
+#define g_assert(x)
+#undef g_assert_not_reached
+#define g_assert_not_reached()
+#endif
+
 #ifndef O_LARGEFILE
 #define O_LARGEFILE 0
 #endif
diff --git a/meson.build b/meson.build
index 8a8c415..f32b075 100644
--- a/meson.build
+++ b/meson.build
@@ -199,6 +199,11 @@ if get_option('gprof')
   qemu_ldflags += ['-p']
 endif
 
+if get_option('videzzo')
+  qemu_cflags += ['-videzzo-instrumentation=' + (meson.current_source_dir() / 'videzzo_qemu_types.yaml')]
+  qemu_cflags += ['-flegacy-pass-manager']
+endif
+
 # Specify linker-script with add_project_link_arguments so that it is not placed
 # within a linker --start-group/--end-group pair
 if get_option('fuzzing')
@@ -2889,6 +2894,7 @@ qmp_ss = ss.source_set()
 qom_ss = ss.source_set()
 softmmu_ss = ss.source_set()
 specific_fuzz_ss = ss.source_set()
+videzzo_fuzz_ss = ss.source_set()
 specific_ss = ss.source_set()
 stub_ss = ss.source_set()
 trace_ss = ss.source_set()
@@ -3162,6 +3168,7 @@ subdir('linux-user')
 # needed for fuzzing binaries
 subdir('tests/qtest/libqos')
 subdir('tests/qtest/fuzz')
+subdir('tests/qtest/videzzo')
 
 # accel modules
 tcg_real_module_ss = ss.source_set()
@@ -3514,6 +3521,15 @@ foreach target : target_dirs
         'dependencies': specific_fuzz.dependencies(),
       }]
     endif
+    if get_option('fuzzing')
+      videzzo_fuzz = videzzo_fuzz_ss.apply(config_target, strict: false)
+      execs += [{
+        'name': 'qemu-videzzo-' + target_name,
+        'win_subsystem': 'console',
+        'sources': videzzo_fuzz.sources(),
+        'dependencies': videzzo_fuzz.dependencies(),
+      }]
+    endif
   else
     execs = [{
       'name': 'qemu-' + target_name,
diff --git a/meson_options.txt b/meson_options.txt
index e58e158..441b74c 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -42,6 +42,8 @@ option('docs', type : 'feature', value : 'auto',
        description: 'Documentations build support')
 option('fuzzing', type : 'boolean', value: false,
        description: 'build fuzzing targets')
+option('videzzo', type : 'boolean', value: false,
+       description: 'build videzzo targets')
 option('gettext', type : 'feature', value : 'auto',
        description: 'Localization of the GTK+ user interface')
 option('module_upgrades', type : 'boolean', value : false,
diff --git a/scripts/oss-fuzz/instrumentation-filter-template b/scripts/oss-fuzz/instrumentation-filter-template
index 76d2b61..7909550 100644
--- a/scripts/oss-fuzz/instrumentation-filter-template
+++ b/scripts/oss-fuzz/instrumentation-filter-template
@@ -10,6 +10,7 @@ src:*/net/*
 # instrument the fuzzer entry-point so libFuzzer always sees at least some
 # coverage - otherwise it will exit after the first input
 src:*/tests/qtest/fuzz/fuzz.c
+src:*/tests/qtest/videzzo/videzzo_qemu.c
 
 # Enable instrumentation for all functions in those files
 fun:*
diff --git a/tests/qtest/videzzo/less_crashes_wrappers.c b/tests/qtest/videzzo/less_crashes_wrappers.c
new file mode 100644
index 0000000..faf775e
--- /dev/null
+++ b/tests/qtest/videzzo/less_crashes_wrappers.c
@@ -0,0 +1,26 @@
+/*
+ * Dependency-Aware Virtual-Device Fuzzing Less Crashes Wrapper
+ *
+ * Copyright Red Hat Inc., 2020
+ *
+ * Authors:
+ *  Qiang Liu <cyruscyliu@gmail.com>
+ *
+ * This work is licensed under the terms of the GNU GPL, version 2 or later.
+ * See the COPYING file in the top-level directory.
+ */
+
+#define WRAP(RET_TYPE, NAME_AND_ARGS)\
+    RET_TYPE __wrap_##NAME_AND_ARGS;\
+    RET_TYPE __real_##NAME_AND_ARGS;
+
+WRAP(void     , abort())
+
+void __wrap_abort()
+{
+#ifdef VIDEZZO_LESS_CRASHES
+    return;
+#else
+    return __real_abort();
+#endif
+}
diff --git a/tests/qtest/videzzo/meson.build b/tests/qtest/videzzo/meson.build
new file mode 100644
index 0000000..b26ee22
--- /dev/null
+++ b/tests/qtest/videzzo/meson.build
@@ -0,0 +1,21 @@
+if not get_option('videzzo')
+  subdir_done()
+endif
+
+videzzo_fuzz_ss.add(files('less_crashes_wrappers.c'), qos)
+
+# Targets
+videzzo_fuzz_ss.add(files('videzzo_qemu.c'))
+
+# Dependencies
+videzzo_fuzz_ss.add(declare_dependency(
+  link_args: fuzz_exe_ldflags + ['-L' + meson.current_source_dir(),  '-lvidezzo'])
+)
+
+videzzo_fuzz_ss.add(declare_dependency(
+  link_args: fuzz_exe_ldflags + ['-lvncclient'])
+)
+
+videzzo_fuzz_ss.add(declare_dependency(
+  link_args: fuzz_exe_ldflags + ['-Wl,-wrap,abort'])
+)
diff --git a/hw/acpi/erst.c b/hw/acpi/erst.c
index 35007d8..656d859 100644
--- a/hw/acpi/erst.c
+++ b/hw/acpi/erst.c
@@ -585,6 +585,10 @@ static unsigned clear_erst_record(ERSTDeviceState *s)
     return rc;
 }
 
+static void __videzzo_write_exchange_mr(uint64_t addr, uint32_t size) {
+    printf("going to write from 0x%lx to 0x%u\n", addr, size);
+}
+
 /* ACPI 4.0: 17.4.2.2 Operations - Reading */
 static unsigned read_erst_record(ERSTDeviceState *s)
 {
@@ -624,6 +628,7 @@ static unsigned read_erst_record(ERSTDeviceState *s)
 
         /* Obtain pointer to the exchange buffer */
         exchange = memory_region_get_ram_ptr(&s->exchange_mr);
+        __videzzo_write_exchange_mr((&s->exchange_mr)->addr, exchange_length);
         exchange += s->record_offset;
         /* Obtain pointer to slot in storage */
         nvram = get_nvram_ptr_by_index(s, index);
@@ -675,6 +680,7 @@ static unsigned write_erst_record(ERSTDeviceState *s)
 
     /* Obtain pointer to record in the exchange buffer */
     exchange = memory_region_get_ram_ptr(&s->exchange_mr);
+    __videzzo_write_exchange_mr((&s->exchange_mr)->addr, exchange_length);
     exchange += s->record_offset;
 
     /* Validate CPER record_length */
diff --git a/hw/display/qxl.c b/hw/display/qxl.c
index ec712d3..6fcfc05 100644
--- a/hw/display/qxl.c
+++ b/hw/display/qxl.c
@@ -1615,7 +1615,7 @@ static void ioport_write(void *opaque, hwaddr addr,
     uint32_t orig_io_port;
 
     if (d->guest_bug && io_port != QXL_IO_RESET) {
-        return;
+        io_port = addr = QXL_IO_RESET;
     }
 
     if (d->revision <= QXL_REVISION_STABLE_V10 &&
diff --git a/hw/virtio/virtio.c b/hw/virtio/virtio.c
index f35178f..8615c29 100644
--- a/hw/virtio/virtio.c
+++ b/hw/virtio/virtio.c
@@ -2142,12 +2142,49 @@ void virtio_reset(void *opaque)
     }
 }
 
+static void this_is_a_stub_for_virtio_blk(VirtIODevice *vdev, int n, hwaddr addr) {
+    // virtio_blk_handle_output
+    // printf("== %s %d 0x%08lx\n", vdev->name, n, addr);
+}
+
+static void this_is_a_stub_for_virtio_net_rx(VirtIODevice *vdev, int n, hwaddr addr) {
+    // virtio_net_handle_rx
+    // printf("== %s %d 0x%08lx\n", vdev->name, n, addr);
+}
+
+static void this_is_a_stub_for_virtio_net_tx(VirtIODevice *vdev, int n, hwaddr addr) {
+    // virtio_net_handle_tx_bh
+    // printf("== %s %d 0x%08lx\n", vdev->name, n, addr);
+}
+
+static void this_is_a_stub_for_virtio_net_ctrl(VirtIODevice *vdev, int n, hwaddr addr) {
+    // virtio_net_handle_ctrl
+    // printf("== %s %d 0x%08lx\n", vdev->name, n, addr);
+}
+
+extern uint64_t AroundInvalidAddress(uint64_t physaddr);
 void virtio_queue_set_addr(VirtIODevice *vdev, int n, hwaddr addr)
 {
+    if (strcmp(vdev->name, "virtio-blk") == 0) {
+        n = 0;
+    } else if (strcmp(vdev->name, "virtio-net") == 0 && n == 0) {
+        n = n % 3;
+    }
     if (!vdev->vq[n].vring.num) {
         return;
     }
-    vdev->vq[n].vring.desc = addr;
+    uint64_t addr0 = AroundInvalidAddress(addr);
+    vdev->vq[n].vring.desc = addr0;
+    if (strcmp(vdev->name, "virtio-blk") == 0 && n == 0) {
+        this_is_a_stub_for_virtio_blk(vdev, n, addr0);
+    } else if (strcmp(vdev->name, "virtio-net") == 0 && n == 0) {
+        this_is_a_stub_for_virtio_net_rx(vdev, n, addr0);
+    } else if (strcmp(vdev->name, "virtio-net") == 0 && n == 1) {
+        this_is_a_stub_for_virtio_net_tx(vdev, n, addr0);
+    } else if (strcmp(vdev->name, "virtio-net") == 0 && n == 2) {
+        this_is_a_stub_for_virtio_net_ctrl(vdev, n, addr0);
+    }
+
     virtio_queue_update_rings(vdev, n);
 }
 
@@ -2170,15 +2207,7 @@ void virtio_queue_set_rings(VirtIODevice *vdev, int n, hwaddr desc,
 
 void virtio_queue_set_num(VirtIODevice *vdev, int n, int num)
 {
-    /* Don't allow guest to flip queue between existent and
-     * nonexistent states, or to set it to an invalid size.
-     */
-    if (!!num != !!vdev->vq[n].vring.num ||
-        num > VIRTQUEUE_MAX_SIZE ||
-        num < 0) {
-        return;
-    }
-    vdev->vq[n].vring.num = num;
+    vdev->vq[n].vring.num = 0x100;
 }
 
 VirtQueue *virtio_vector_first_queue(VirtIODevice *vdev, uint16_t vector)
@@ -2193,6 +2222,15 @@ VirtQueue *virtio_vector_next_queue(VirtQueue *vq)
 
 int virtio_queue_get_num(VirtIODevice *vdev, int n)
 {
+    if (strcmp(vdev->name, "virtio-blk") == 0 && n == 0) {
+        vdev->vq[n].vring.num = 0x100;
+    } else if (strcmp(vdev->name, "virtio-net") == 0 && n == 0) {
+        vdev->vq[n].vring.num = 0x100;
+    } else if (strcmp(vdev->name, "virtio-net") == 0 && n == 1) {
+        vdev->vq[n].vring.num = 0x100;
+    } else if (strcmp(vdev->name, "virtio-net") == 0 && n == 2) {
+        vdev->vq[n].vring.num = 0x100;
+    }
     return vdev->vq[n].vring.num;
 }
 
@@ -2256,6 +2294,11 @@ static void virtio_queue_notify_vq(VirtQueue *vq)
 
 void virtio_queue_notify(VirtIODevice *vdev, int n)
 {
+    if (strcmp(vdev->name, "virtio-blk") == 0) {
+        n = 0;
+    } else if (strcmp(vdev->name, "virtio-net") == 0) {
+        n = n % 3;
+    }
     VirtQueue *vq = &vdev->vq[n];
 
     if (unlikely(!vq->vring.desc || vdev->broken)) {
@@ -3566,12 +3609,6 @@ void virtio_device_set_child_bus_name(VirtIODevice *vdev, char *bus_name)
 
 void G_GNUC_PRINTF(2, 3) virtio_error(VirtIODevice *vdev, const char *fmt, ...)
 {
-    va_list ap;
-
-    va_start(ap, fmt);
-    error_vreport(fmt, ap);
-    va_end(ap);
-
     if (virtio_vdev_has_feature(vdev, VIRTIO_F_VERSION_1)) {
         vdev->status = vdev->status | VIRTIO_CONFIG_S_NEEDS_RESET;
         virtio_notify_config(vdev);
